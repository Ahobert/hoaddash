---
format: html
---

```{r, echo = FALSE}
library(tidyverse)
library(reactable)
library(htmltools)
library(crosstalk)
```

```{r country_league_data}
jct_hybrid_jns <- readr::read_csv("data/jct_hybrid_jns.csv")


cc_openalex_inst_jn_ind <- readr::read_csv("data/cc_openalex_inst_jn_ind.csv") |>
  rename(jn_id = issn_l) |> 
  dplyr::filter(jn_id %in% jct_hybrid_jns$issn_l) |>
  dplyr::mutate(cr_year = as.character(cr_year)) |>
  dplyr::mutate(cc = factor(
    cc,
    # Order by permissiveness
    levels = c(
      "CC BY",
      "CC BY-SA",
      "CC BY-NC",
      "CC BY-NC-SA",
      "CC BY-ND",
      "CC BY-NC-ND"
    )))
  
cc_jn_ind <- readr::read_csv("data/cc_jn_ind.csv") |>
  rename(jn_id = issn_l) |>
  dplyr::filter(jn_id %in% jct_hybrid_jns$issn_l) |>
  mutate(cr_year = as.character(cr_year)) |>
  dplyr::mutate(cc = factor(
    cc,
    # Order by permissiveness
    levels = c(
      "CC BY",
      "CC BY-SA",
      "CC BY-NC",
      "CC BY-NC-SA",
      "CC BY-ND",
      "CC BY-NC-ND"
    )))
```

```{r data_country_table}
## Publisher-specific tables
country_publisher_league <- jct_hybrid_jns |>
  distinct(jn_id = issn_l, esac_publisher) |>
  inner_join(cc_openalex_inst_jn_ind, by = "jn_id") |>
  distinct() 

country_publisher_total <- country_publisher_league |>
  distinct(esac_publisher, jn_id, cr_year, country_code, articles_total) |>
  group_by(cr_year, country_code, esac_publisher) |>
  summarise(articles = sum(articles_total))

country_publisher_cc <- country_publisher_league |>
    filter(!is.na(cc)) |>
    distinct(esac_publisher, jn_id, cr_year, articles_under_cc_variant, country_code, cc) |>
    group_by(cr_year, country_code, esac_publisher) |>
    summarize(cc_total = sum(articles_under_cc_variant))

country_df <- left_join(country_publisher_total, country_publisher_cc, by = c("cr_year", "country_code", "esac_publisher")) |>
    mutate(cr_year = factor(cr_year)) |>
    mutate(prop = cc_total / articles) |>
    mutate_if(is.numeric, ~replace(., is.na(.), 0)) |>
    filter(!is.na(country_code)) |>
    mutate(
    country_name = countrycode::countrycode(country_code, origin = "iso2c", destination = "country.name")) 
## All
country_publisher_total_all <- country_publisher_league |>
  distinct(jn_id, cr_year, country_code, articles_total) |>
  group_by(cr_year, country_code) |>
  summarise(articles = sum(articles_total))

country_publisher_cc_all <- country_publisher_league |>
    filter(!is.na(cc)) |>
    distinct(jn_id, cr_year, articles_under_cc_variant, country_code, cc) |>
    group_by(cr_year, country_code) |>
    summarize(cc_total = sum(articles_under_cc_variant))

country_df_all <- left_join(country_publisher_total_all, country_publisher_cc_all, by = c("cr_year", "country_code")) |>
    mutate(cr_year = factor(cr_year)) |>
    mutate(prop = cc_total / articles) |>
    mutate_if(is.numeric, ~replace(., is.na(.), 0)) |>
    filter(!is.na(country_code)) |>
    mutate(
    country_name = countrycode::countrycode(country_code, origin = "iso2c", destination = "country.name")) |>
  mutate(esac_publisher = "All")

```

```{r country_publisher_table}
country_pub_df <- bind_rows(country_df, country_df_all) |>
  ungroup() |>
  select(country_name,
         cc_total,
         articles,
         prop,
         cr_year,
         esac_publisher)
# Max values to define width of bar charts
bar_max_width <- country_pub_df %>%
  group_by(cr_year, esac_publisher)  %>%
  summarize(max_group = max(cc_total),
            max_all_group = max(articles)) %>%
  ungroup() |>
  # Deal with periods where no CC licenses where found
  mutate(max_group = ifelse(max_group == 0, 1, max_group))

country_pub_df <-
  country_pub_df %>%
  left_join(bar_max_width, by = c("esac_publisher", "cr_year")) %>%
  # Remove missing country information
  filter(!is.na(country_name))

## Offer Select option by most productive publishers
all_df <- country_publisher_league |>
  distinct(cr_year, esac_publisher, jn_id, articles_total) |>
  group_by(cr_year, esac_publisher) |>
  summarise(journals = n_distinct(jn_id),
            all_articles = sum(articles_total))

top_publisher <-
  all_df |>
  group_by(esac_publisher) |>
  summarise(n = sum(all_articles))  |>
  arrange(desc(n)) |>
  pull(esac_publisher)

top <- top_publisher

country_pub_df <- country_pub_df |>
  mutate(esac_publisher = fct_relevel(esac_publisher, "All", top))
# Reactable + Crosstalk
shared_oa_country_df <- SharedData$new(country_pub_df)

react_table_oa_country <- reactable::reactable(
  shared_oa_country_df,
  style = list(),
  defaultColDef = colDef(headerClass = "header"),
  defaultSorted = "cc_total",
  defaultSortOrder = "desc",
  # Highlight Germany
  rowStyle = JS(
    "function(rowInfo) {
    if (rowInfo.row['country_name'] == 'Germany') {
      return { background: 'rgba(234, 226, 216)' }
    }
  }"
  ),
  # Define columns
  columns = list(
    country_name = colDef(html = TRUE,
                          name = "Country",
                          width = 200),
    cc_total = colDef(
      #  html = TRUE,
      name = "OA with CC",
      align = "left",
      style = list(whiteSpace = "pre"),
      cell = function(value, index) {
        ### define the bar width according to the specified value
        width <-
          paste0(value * 100 / shared_oa_country_df$data()$max_group[index], "%")
        ### add a comma to the label
        value <- format(value, big.mark = ",")
        ### justify and provide padding with width
        value <- format(value, width = 10, justify = "right")
        ### create the barchart div
        bar <- div(
          ### with a class of 'bar-chart'
          class = "bar-chart",
          ### give the bar a margin
          style = list(marginRight = "6px"),
          div(
            class = "bar",
            style = list(width = width, backgroundColor = "#fc5185")
          )
        )
        ### bring it all together, with the 'value' (number) preceding the bar itself
        div(class = "bar-cell", span(class = "number", value), bar)
      }
    ),
    articles = colDef(
      #  html = TRUE,
      name = "Total Article Volume",
      align = "left",
      style = list(whiteSpace = "pre"),
      cell = function(value, index) {
        ### define the bar width according to the specified value
        width <-
          paste0(value * 100 / shared_oa_country_df$data()$max_all_group[index], "%")
        ### add a comma to the label
        value <- format(value, big.mark = ",")
        value <- format(value, width = 10, justify = "right")
        bar <- div(
          class = "bar-chart",
          style = list(marginRight = "6px"),
          div(
            class = "bar",
            style = list(width = width, backgroundColor = "#c3c3c3")
          )
        )
        ### bring it all together, with the 'value' (number) preceding the bar itself
        div(class = "bar-cell", span(class = "number", value), bar)
      }
    ),
    prop = colDef(
      name = "% of total",
      format = colFormat(percent = TRUE, digits = 1),
      style = list(fontWeight = "bold"),
      class = "number",
      align = "right",
      width = 90
    ),
    # Don't show columns that are used for filtering or calculations
    cr_year = colDef(show = FALSE),
    esac_publisher = colDef(show = FALSE),
    max_all_group = colDef(show = FALSE),
    max_group = colDef(show = FALSE)
  ),
  compact = TRUE,
  language = reactableLang(
    searchPlaceholder = "SEARCH COUNTRIES",
    noData = "No country found",
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} countries",
    pagePrevious = "\u276e",
    pageNext = "\u276f",
  )
)
```

```{r}
htmltools::div(
  class = "agreement-tbl",
  htmltools::div(
    class = "filters",
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_country",
        "Countries",
        shared_oa_country_df,
        ~ country_name,
        multiple = TRUE
      )
    ),
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_country_deal",
        "Publisher",
        shared_oa_country_df,
        ~ esac_publisher,
        multiple = FALSE
      )
    ),
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_country_year",
        "Publication Year",
        shared_oa_country_df,
        ~ cr_year,
        multiple = FALSE
      )
    )
  ),
  react_table_oa_country,
  htmltools::div(class = "agreement-footer", "
  Data sources: Journal Checker Tool, Crossref, OpenAlex")
)
```


```{js,echo = FALSE}
 /* https://stackoverflow.com/a/66216595 */
$(document).ready(function() {
    document.getElementById("filter_country_year").getElementsByClassName("selectized")[0].selectize.setValue("2021", false);
    document.getElementById("filter_country_deal").getElementsByClassName("selectized")[0].selectize.setValue("All", false);
});
```
