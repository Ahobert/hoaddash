---
format: html
---

```{r}
library(tidyverse)
library(reactable)
library(htmltools)
library(sparkline)
```

```{r}
#journal data
jct_hybrid_jns <- readr::read_csv("data/jct_hybrid_jns.csv")

cc_openalex_inst_jn_ind <- readr::read_csv("data/cc_openalex_inst_jn_ind.csv") |>
  rename(jn_id = issn_l) |> 
  dplyr::filter(jn_id %in% jct_hybrid_jns$issn_l) |>
  dplyr::mutate(cr_year = as.character(cr_year)) |>
  dplyr::mutate(cc = factor(
    cc,
    # Order by permissiveness
    levels = c(
      "CC BY",
      "CC BY-SA",
      "CC BY-NC",
      "CC BY-NC-SA",
      "CC BY-ND",
      "CC BY-NC-ND"
    )))

cc_jn_ind <- readr::read_csv("data/cc_jn_ind.csv") |>
  rename(jn_id = issn_l) |>
  dplyr::filter(jn_id %in% jct_hybrid_jns$issn_l) |>
  mutate(cr_year = as.character(cr_year)) |>
  dplyr::mutate(cc = factor(
    cc,
    # Order by permissiveness
    levels = c(
      "CC BY",
      "CC BY-SA",
      "CC BY-NC",
      "CC BY-NC-SA",
      "CC BY-ND",
      "CC BY-NC-ND"
    )))

all_df <- cc_jn_ind |>
  distinct(cr_year, jn_id, jn_all) |>
  group_by(cr_year, jn_id) |>
  summarise(all_articles = sum(jn_all))

cc_top <- cc_jn_ind |>
  ungroup() |>
  filter(!is.na(cc)) |>
  group_by(cr_year, jn_id) |>
  summarise(cc_total = sum(cc_total, na.rm = TRUE)) |>
  right_join(all_df, by = c("jn_id", "cr_year")) |>
  mutate(prop = cc_total / all_articles) |>
  ungroup() |>
  tidyr::complete(cr_year, nesting(jn_id), fill = list(cc_total = 0, prop = 0)) 

cc_all <- cc_top |>
  group_by(jn_id) |>
  summarise(cc_total = sum(cc_total, na.rm = TRUE),
            all_articles =  sum(all_articles, na.rm = TRUE)) |>
  mutate(all_prop = cc_total / all_articles)


### table
jn_global <- cc_top |>
  group_by(jn_id) |>
  summarise(cc_trend = list(round(prop * 100, 1))) |>
  inner_join(cc_all, by = "jn_id")

#### DE

## Germany
de_df <- jct_hybrid_jns |>
  distinct(jn_id = issn_l) |>
  inner_join(cc_openalex_inst_jn_ind, by = "jn_id") |>
  distinct() |>
  filter(country_code == "DE")

de_total <- de_df |>
  distinct(cr_year, jn_id, articles_total) %>%
  group_by(cr_year,jn_id) %>%
  summarize(jn_all = sum(articles_total))

de_top <- de_df |>
  filter(!is.na(cc)) |>
  distinct(cr_year, jn_id, articles_under_cc_variant, cc) |>
  group_by(cr_year, jn_id) |>
  summarize(cc_total = sum(articles_under_cc_variant)) |>
  # We also wanna include journals without OA article in a single year
  right_join(de_total, by = c("cr_year", "jn_id")) |>
  mutate(cr_year = factor(cr_year)) %>%
  mutate(prop = cc_total / jn_all) %>%
  mutate_if(is.numeric, ~replace(., is.na(.), 0)) |>
  ungroup() |>
  tidyr::complete(jn_id, nesting(cr_year), fill = list(cc_total = 0, prop = 0, jn_all = 0, journals = 0))

de_17_22 <- de_top |>
  group_by(jn_id) |>
  summarise(de_cc_total = sum(cc_total),
            de_all_articles = sum(jn_all))

jn_de <- de_top |>
  group_by(jn_id) |>
  summarise(de_cc_trend = list(round(prop * 100, 1))) |>
  right_join(de_17_22, by = "jn_id") |>
  mutate(de_all_prop = de_cc_total / de_all_articles)

## for table
jn_table_df <- jn_global |> 
  left_join(jn_de, by = "jn_id") |> 
  # Missing values
  mutate(across(c(de_all_articles, de_cc_total, de_all_prop), ~replace(., is.na(.), 0))) |>
  mutate(de_cc_trend = ifelse(de_cc_total == 0, list(rep(0, 6)), de_cc_trend)) 

# add venue info
venues <- readr::read_csv("data/jct_oalex_venues.csv") 
venues_df <- venues |>
  mutate(journal_name = case_when(
    !is.na(homepage_url) ~ glue::glue('{display_name}<a href="{homepage_url}" target="_blank"><sup><small><i class="bi bi-box-arrow-up-right"></i></small></sup></a>'),
    is.na(homepage_url) ~ display_name)
    ) |>
  mutate(issn_link = glue::glue('ISSN-L: <a href="https://zdb-katalog.de/list.xhtml?t={issn_l}&key=iss&frm=O&asc=false" target="_blank">{issn_l}</a> | OpenAlex: <a href="{id}" target="_blank">{gsub("https://openalex.org/", "", id)}</a>')) |>
  mutate(journal_display = glue::glue('<div><div style="font-weight:bold">{journal_name}</div><div style="font-size: 0.7rem">{issn_link}</div></div>'))

# Add to table

jn_table_df_react_ <- jn_table_df |>
  inner_join(venues_df, by = c("jn_id" = "issn_l")) |>
  select(journal_display, all_articles, all_prop, cc_trend, de_all_articles, de_all_prop, de_cc_trend ) |>
  mutate(across(contains("prop"), ~ round(., 3) * 100))
```

```{r}
# table donuts
# donut
# https://glin.github.io/reactable/articles/popular-movies/popular-movies.html
get_global_color <- function(score) {
    global_pal <- function(x) rgb(colorRamp(c("#DAF7F4", "#00C7B3"))(x), maxColorValue = 255)
    normalized <- (score - min(score)) / (max(score) - min(score))
    global_pal(normalized)
}
get_germany_color <- function(score) {
    germany_pal <- function(x) rgb(colorRamp(c("#DAEFF7", "#0093C7"))(x), maxColorValue = 255)
    normalized <- (score - min(score)) / (max(score) - min(score))
    germany_pal(normalized)
}

jn_table_df_react <- jn_table_df_react_ |>
  #head() |>
  mutate(global_color = get_global_color(all_prop),
         germany_color = get_germany_color(de_all_prop)) |>
  mutate(all_trend_spark = NA,
         de_trend_spark = NA) |>
  relocate(all_trend_spark, .before = de_all_articles)

```

```{r}
## Table
journal_listing <- reactable::reactable(
  jn_table_df_react,
  pagination = TRUE,
  searchable = TRUE,
  compact = TRUE,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  defaultSorted = "journal_display",
  defaultSortOrder = "desc",
  columns = list(
    journal_display = colDef(
      "Journal",
      defaultSortOrder = "asc",
      html = TRUE,
      minWidth = 250
    ),
    all_articles = colDef(
      "Articles",
      format = colFormat(separators = TRUE, locales = "en-GB"),
      width = 90,
      style = list(whiteSpace = "pre"),
      class = "number border-left",
    ),
    all_prop = colDef(
      "% OA",
      cell = JS(
        "function(cellInfo) {
        const sliceColor = cellInfo.row['global_color']
        const sliceLength = 2 * Math.PI * 24
        const sliceOffset = sliceLength * (1 - cellInfo.value / 100)
        const donutChart = (
          '<svg width=60 height=60 style=\"transform: rotate(-90deg)\" focusable=false>' +
            '<circle cx=30 cy=30 r=24 fill=none stroke-width=4 stroke=rgba(0,0,0,0.1)></circle>' +
            '<circle cx=30 cy=30 r=24 fill=none stroke-width=4 stroke=' + sliceColor +
            ' stroke-dasharray=' + sliceLength + ' stroke-dashoffset=' + sliceOffset + '></circle>' +
          '</svg>'
        )
        const label = '<div style=\"position: absolute; top: 50%; left: 50%; ' +
          'transform: translate(-50%, -50%)\">' + cellInfo.value + '%' + '</div>'
        return '<div style=\"display: inline-flex; position: relative\">' + donutChart + label + '</div>'
      }"
      ),
      html = TRUE,
      align = "center",
      width = 130
    ),
    de_all_articles = colDef(
      "Articles",
      format = colFormat(separators = TRUE, locales = "en-GB"),
      width = 90,
      style = list(whiteSpace = "pre"),
      class = "number border-left",
    ),
    de_all_prop = colDef(
      "% OA",
      cell = JS(
        "function(cellInfo) {
        const sliceColor = cellInfo.row['germany_color']
        const sliceLength = 2 * Math.PI * 24
        const sliceOffset = sliceLength * (1 - cellInfo.value / 100)
        const donutChart = (
          '<svg width=60 height=60 style=\"transform: rotate(-90deg)\" focusable=false>' +
            '<circle cx=30 cy=30 r=24 fill=none stroke-width=4 stroke=rgba(0,0,0,0.1)></circle>' +
            '<circle cx=30 cy=30 r=24 fill=none stroke-width=4 stroke=' + sliceColor +
            ' stroke-dasharray=' + sliceLength + ' stroke-dashoffset=' + sliceOffset + '></circle>' +
          '</svg>'
        )
        const label = '<div style=\"position: absolute; top: 50%; left: 50%; ' +
          'transform: translate(-50%, -50%)\">' + cellInfo.value + '%' + '</div>'
        return '<div style=\"display: inline-flex; position: relative\">' + donutChart + label + '</div>'
      }"
      ),
      html = TRUE,
      align = "center",
      width = 130
    ),
    all_trend_spark = colDef(
      "Trend",
      cell = function(value, index) {
        sparkline(
          jn_table_df_react$cc_trend[[index]],
          lineColor = "#00C7B3",
          fillColor = "transparent",
          highlightSpotColor = "#00C7B3",
          minSpotColor = FALSE,
          maxSpotColor = FALSE,
          spotColor = FALSE,
          lineWidth = 2.5,
          spotRadius = 4,
          width = 90
        )
      },
      minWidth = 100,
      align = "center"
    ),
    de_trend_spark = colDef(
      "Trend",
      cell = function(value, index) {
        sparkline(
          jn_table_df_react$de_cc_trend[[index]],
          lineColor = "#0093c7",
          fillColor = "transparent",
          highlightSpotColor = "#0093c7",
          minSpotColor = FALSE,
          maxSpotColor = FALSE,
          spotColor = FALSE,
          lineWidth = 2.5,
          spotRadius = 4,
          width = 90,
          chartRangeMin = 0,
          chartRangeMax = 10
        )
      },
      minWidth = 100,
      align = "center"
    ),
    issn_link = colDef(show = FALSE),
    cc_trend = colDef(show = FALSE),
    de_cc_trend = colDef(show = FALSE),
    global_color = colDef(show = FALSE),
    germany_color = colDef(show = FALSE)
  ),
  # Create column group
  columnGroups = list(
    colGroup(
      name = "Global Publication Volume",
      columns = c("all_articles", "all_prop", "all_trend_spark"),
      headerClass = "group-header"
    ),
    colGroup(
      name = "German Lead Authors",
      columns = c("de_all_articles", "de_all_prop", "de_trend_spark"),
      headerClass = "group-header"
    )
  ),
  defaultPageSize = 8,
  language = reactableLang(
    pageInfo = "{rowStart}\u2013{rowEnd} of {rows} hybrid journals",
    pagePrevious = "\u276e",
    pageNext = "\u276f"
  )
)
```

```{r}
htmltools::div(
  class = "agreement-tbl",
journal_listing)
```
