---
format: html
---

```{r open_md_coverage_setup}
library(tidyverse)
library(reactable)
library(htmltools)
library(crosstalk)

open_md <- readr::read_csv("data/cc_md_indicators_all.csv")
```

```{r open_md_data_prep}
open_md_df <- open_md |>
  rename(articles = article_total) |>
  mutate(across(contains("total"), function(x) x / articles)) |>
  select(-articles) |>
  pivot_longer(contains("total")) |>
  pivot_wider(names_from = cr_year, values_from = value) |>
  select(esac_publisher, cat, name, as.character(2017:2022)) |>
  # Human-readable labels
  mutate(name = case_when(
    name == "tdm_total" ~ "TDM Support",
    name == "orcid_total" ~ "ORCID",
    name == "funder_total" ~ "Funder info",
    name == "abstract_total" ~ "Open Abstracts",
    name == "ref_total" ~ "Open Citations	")) |>
  # Sort publisher, from _country_league_table.qmd
  mutate(esac_publisher = fct_relevel(esac_publisher, top)) |>
  arrange(esac_publisher)
```

```{r open_md_reactable_prep}
# Format percentages and color cells
# https://glin.github.io/reactable/articles/womens-world-cup/womens-world-cup.html
format_pct <- function(value) {
  if (is.na(value)) "  \u2013 "    # en dash for 0%
 # else if (value < 0.01) " <1%"
 # else if (value > 0.99) ">99%"
  else formatC(paste0(round(value * 100), "%"), width = 4)
}
# Color cells
make_color_pal <- function(colors, bias = 1) {
  get_color <- colorRamp(colors, bias = bias)
  function(x) rgb(get_color(x), maxColorValue = 255)
}

# http://vis4.net/palettes/#/9|s|00429d,96ffea,ffffe0|ffffe0,ff005e,93003a|1|1
pct_color <- make_color_pal(c("#ffffe0","#ffdec7","#ffbcaf","#ff9895","#f4777f","#e4576b","#cf3759","#b41648","#93003a"), bias = 2)

indicator_column <- function(maxWidth = 70, class = NULL, ...) {
  colDef(
    cell = format_pct,
    maxWidth = 70,
    class = paste("cell number", class),
    style = function(value) {
      # Lighter color for <1%
      if (is.na(value)) {
        list(color = "#333333")
     } else if (value < 0.2) {
        list(color = "#333333", background = pct_color(value))
      } else {
        list(color = "#fff", background = pct_color(value))
      }
    },
    ...
  )
}
```

```{r}
# Make table

# Initiate Crosstalk
shared_open_md_df <- SharedData$new(open_md_df)

open_md_react <- reactable(shared_open_md_df,
                           pagination = TRUE,
                           highlight = TRUE,
                           compact = TRUE,
          columns = list(
            esac_publisher = colDef("Publisher",
                                    # https://glin.github.io/reactable/articles/cookbook/cookbook.html#merge-cells
                                    style = JS("function(rowInfo, column, state) {
        const firstSorted = state.sorted[0]
        if (!firstSorted || firstSorted.id === 'esac_publisher') {
          const prevRow = state.pageRows[rowInfo.viewIndex - 1]
          if (prevRow && rowInfo.values['esac_publisher'] === prevRow['esac_publisher']) {
            return { visibility: 'hidden' }
          }
        }
      }"),
       minWidth = 180),
            name = colDef("Metadata",
                          minWidth = 120),
            `2017` = indicator_column(name = "2017"),
            `2018` = indicator_column(name = "2018"),
            `2019` = indicator_column(name = "2019"),
            `2020` = indicator_column(name = "2020"),
            `2021` = indicator_column(name = "2021"),
            `2022` = indicator_column(name = "2022"),
      cat = colDef(show = FALSE)
          ))
```

```{r}
htmltools::div(
  class = "agreement-tbl",
  # filters,
  htmltools::div(
    class = "filters",
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_open_md_cat_publisher",
        "Publisher",
        shared_open_md_df,
        ~ esac_publisher,
        multiple = TRUE
      )
    ),
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_open_md_input",
        "Metadata",
        shared_open_md_df,
        ~ name,
        multiple = TRUE
      )
    ),
    htmltools::div(
      class = "filter-input",
      filter_select(
        "filter_open_md_cat_input",
        "Global / Germany",
        shared_open_md_df,
        ~ cat,
        multiple = FALSE
      )
    ),
  ),
  # table
  open_md_react,
  # footer
  htmltools::div(
    class = "agreement-footer",
    paste(
      "Data sources: Journal Checker Tool, Crossref, OpenAlex. Last updated:",
      Sys.Date(),
      "."
    )
  )
)
```
            
```{js, echo = FALSE}
 /* https://stackoverflow.com/a/66216595 */
$(document).ready(function() {
     document.getElementById("filter_open_md_cat_input").getElementsByClassName("selectized")[0].selectize.setValue("Global", false);
});
```

